import React, { useEffect, useCallback } from 'react';
import { Button } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { Controller, useForm } from 'react-hook-form';
import { TinyMCE, Input } from './index.js';
import service from '../services/config.js';
import { useSelector } from 'react-redux';

export default function PostForm({ post }) {
  const navigate = useNavigate();
  const userData = useSelector((state) => state.auth.userData);

  const {
    control,
    watch,
    setValue,
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues: {
      title: post?.post.title || '',
      slug: post?.post.slug || '',
      content: post?.post.content || '',
      featuredImage: post?.post.featuredImage || '',
      status: post?.post.status || 'active',
      createdBy: post?.post.createdBy || '',
    },
  });

  const title = watch('title');

  const slugTransform = useCallback((value) => {
    if (value && typeof value === 'string')
      return value
        .trim()
        .toLowerCase()
        .replace(/[^a-zA-Z\d\s]+/g, '-')
        .replace(/\s/g, '-');

    return '';
  }, []);

  useEffect(() => {
    setValue('slug', slugTransform(title), { shouldValidate: true });
  }, [title, setValue, slugTransform]);

  const newPost = async (data) => {
    console.log(data);
    if (post) {
      const file = data.featuredImage[0]
        ? await service.uploadFile(data.image[0])
        : null;

      if (file) {
        const del_file = await service.deleteFile(post.featuredImage);

        if (del_file) {
          const updatedPost = await service.updatePost(post.$id, {
            ...data,
            featuredImage: file.$id,
          });
          if (updatedPost) {
            navigate(`/post/${updatedPost.$id}`);
          }
        }
      }
    } else {
      
      const file = await service.uploadFile(data.featuredImage[0]);
      if (file) {
        const createdPost = await service.createPost({
          ...data,
          featuredImage: file.$id,
          createdBy: userData.userData.$id,
        });
        if (createdPost) {
          navigate(`/post/${createdPost.$id}`);
        }
      }
    }
  };

  return (
    <>
      <form className="m-4 w-full " onSubmit={handleSubmit(newPost)}>
        <div className="flex flex-row gap-4 w-full">
          <div className="w-1/2 flex flex-col gap-4 justify-start">
            <Input
              type="text"
              labelChildren="TITLE"
              labelClassname="text-gray-600 font-bold"
              inputClassname="w-full p-4 border-2 border-gray-400 rounded-lg focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Enter a Title..."
              htmlFor="title"
              {...register('title', { required: 'Title is required' })}
            />

            {errors.title && (
              <p className="text-red-500 text-sm">{errors.title.message}</p>
            )}

            <TinyMCE
              name="content"
              control={control}
              label="CONTENT"
              {...register('content', { required: 'Content is required' })}
            />
          </div>

          {errors.content && (
            <p className="text-red-500 text-sm">{errors.content.message}</p>
          )}

          <div className="w-1/2 flex flex-col gap-4">
            <Input
              type="text"
              labelChildren="SLUG"
              labelClassname="text-gray-600 font-bold"
              inputClassname="w-full p-4 border-2 border-gray-400 rounded-lg focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Slug will be autogenerated"
              htmlFor="slug"
              readOnly
              {...register('slug', { required: 'Slug is required' })}
              //value={watch('slug')} //watch in jsx causes re render. so watch(title) does not cause rerender itself but because of useeffect but watch(slug) causes re render in itself
            />

            {errors.slug && (
              <p className="text-red-500 text-sm">{errors.slug.message}</p>
            )}

            <Input
              type="file"
              labelChildren="IMAGE"
              labelClassname="text-gray-600 font-bold"
              inputClassname="w-full p-30 py-57 border-2 border-gray-400 rounded-lg focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Enter a Title..."
              htmlFor="featuredImage"
              {...register('featuredImage', { required: 'Image is required' })}
            />

            {errors.image && (
              <p className="text-red-500 text-sm">{errors.image.message}</p>
            )}
          </div>
        </div>
        <div className="w-full flex justify-center items-center m-5">
          <Controller
            name="new-content-submit"
            control={control}
            render={({ field: { onSubmit } }) => (
              <Button
                type="submit"
                variant="contained"
                size="large"
                sx={{
                  px: 20,
                  m: 4,
                }}
              >
                Submit Content
              </Button>
            )}
          />
        </div>
      </form>
    </>
  );
}
